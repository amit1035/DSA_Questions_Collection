/*
 * Program: Recursive Sum from 1 to N
 * Description: This program demonstrates the use of recursion to calculate 
 * the sum of numbers from 1 to n. The function `printNumber` is a recursive 
 * method that accumulates the sum and prints the result once the base 
 * condition (i == n) is reached.
 * 
 * Example: For input (1, 5, 0), the output will be 15 (1+2+3+4+5).
 */

class Main {
    
    public static void printNumber(int i, int n, int sum) {
        if (i == n) {
            sum += i;
            System.out.print(sum);
            return;
        }
        sum += i;
        printNumber(i + 1, n, sum);
    }
    
    public static void main(String[] args) {
        printNumber(1, 5, 0);
    }
}


/*
 * Program: Factorial using Recursion
 * Description: This program calculates the factorial of a given number `n` 
 * using a recursive method. The function `factorialNumber` calls itself 
 * with decremented values until it reaches the base case (n == 1).
 * 
 * Example: For input n = 5, the output will be 120 (5*4*3*2*1).
 */

class Main {
    
    public static int factorialNumber(int n) {
        if (n == 1) {
            return 1;
        }
        int fact = factorialNumber(n - 1);
        int fact1 = n * fact;
        return fact1;
    }

    public static void main(String[] args) {
        int n = 5;
        int ans = factorialNumber(n);
        System.out.print(ans);
    }
}


/*
 * Program: Print Fibonacci Sequence using Recursion
 * Description: Prints the first N Fibonacci numbers using recursion.
 * Not suitable for LeetCode's fib(n) problem as LeetCode expects only
 * the nth Fibonacci number as return value, not the full series.
 */


class Solution {
    public int fib(int n) {
        if (n == 0) return 0;
        if (n == 1) return 1;
        return fib(n - 1) + fib(n - 2);
    }
}

class Solution {
    public int fib(int n) {
        int[] memo = new int[n + 1];
        return helper(n, memo);
    }

    private int helper(int n, int[] memo) {
        if (n == 0) return 0;
        if (n == 1) return 1;
        if (memo[n] != 0) return memo[n];

        memo[n] = helper(n - 1, memo) + helper(n - 2, memo);
        return memo[n];
    }
}


